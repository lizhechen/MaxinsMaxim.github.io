<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[DOM库及常用方法封装]]></title>
      <url>http://yoursite.com/2016/10/29/base/dom/</url>
      <content type="html"><![CDATA[<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><pre><code>         nodeType     nodeName       nodeValue
元素节点     1       大写的标签名      null
文本节点     3          #text         文本内容
注释节点     8         #comment       注释内容
document     9          #document      null
</code></pre><h3 id="DOM元素的增、删、改、移动"><a href="#DOM元素的增、删、改、移动" class="headerlink" title="DOM元素的增、删、改、移动"></a>DOM元素的增、删、改、移动</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="添加："><a href="#添加：" class="headerlink" title="添加："></a>添加：</h4><p>容器.appendChild(元素)<br>将元素添加到指定容器的末尾</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
title<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'woshi nibaba'</span><span class="token punctuation">;</span>
father<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>容器.insertBefore(新元素,旧元素)<br>在指定容器内 将新元素插入到旧元素的前面</p>
<pre class=" language-javascript"><code class="language-javascript">father<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newTit<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="移除："><a href="#移除：" class="headerlink" title="移除："></a>移除：</h4><p>容器.removeChild(元素)<br>在指定容器内 删除元素节点</p>
<pre class=" language-javascript"><code class="language-javascript">father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="替换："><a href="#替换：" class="headerlink" title="替换："></a>替换：</h4><p>容器.replaceChild(新元素，旧元素)<br>在指定容器内 用新元素替换掉 旧元素</p>
<pre class=" language-javascript"><code class="language-javascript">box<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> father<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>联想：参数是新，旧的函数，基本都是新的在前，旧的在后，唯有字符串方法的 str.replace() 第一个参数是旧的(str中的待替换的字符串或者相应的正则表达式),第二个参数是新的(替换成什么)</p>
</blockquote>
<h4 id="克隆："><a href="#克隆：" class="headerlink" title="克隆："></a>克隆：</h4><p>要克隆的元素.cloneNode()<br>返回值就是克隆后的元素,默认只克隆当前元素 不会克隆子孙后代元素，如果为cloneNode(true) 则会克隆当前元素及子孙后代元素</p>
<h4 id="移动"><a href="#移动" class="headerlink" title="移动:"></a>移动:</h4><p>利用DOM映射的特性</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
    setTimeout(function(){
        outer.appendChild(inner);
    }, 2000)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h3><p>创建：<br>目标对象.setAttribute(“属性名”,”属性值”)<br>会显示在html元素的标签内</p>
<p>获取：<br>目标对象.getAttribute(“属性名”)</p>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>obj.name=”xxx<br>不会显示在html中</p>
<blockquote>
<p>联想：jquery中获取表单元素自带的属性，比如checked等，需要使用ele.prop(‘checked’)，ele.prop(‘checked’, ‘checked’); 不能用attr()，attr一般用于自己添加的属性节点。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 创建文档碎片</span>
<span class="token keyword">var</span> frg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="DOM库"><a href="#DOM库" class="headerlink" title="DOM库"></a>DOM库</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**
 * Created by maxin on 2016/10/26.
 */</span>

<span class="token keyword">var</span> kirin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> isStanderBrowser <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 类数组转换为数组
     * @param likeAry
     * @returns {*} 数组
     */</span>
    <span class="token keyword">function</span> <span class="token function">listToArray</span><span class="token punctuation">(</span>likeAry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>likeAry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> likeAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ary<span class="token punctuation">[</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> likeAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> ary<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/*  JSON字符串转换为为JSON对象
     *   @params: JSON字符串
     *   @return: JSON对象
     * */</span>
    <span class="token keyword">function</span> <span class="token function">jsonParse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> window<span class="token punctuation">.</span>JSON <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'('</span> <span class="token operator">+</span> jsonStr <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取或者设置浏览器盒子模型的属性值
     * @param attr 属性
     * @param value 值
     * @returns 只传属性就是获取值，都传就是设置
     */</span>
    <span class="token keyword">function</span> <span class="token function">win</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 求元素相对于body的偏移量
     * @param ele 元素
     * @returns {{left: 左偏移, top: 上偏移}}
     */</span>
    <span class="token keyword">function</span> <span class="token function">offset</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> l <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        l <span class="token operator">+</span><span class="token operator">=</span> ele<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
        t <span class="token operator">+</span><span class="token operator">=</span> ele<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
        <span class="token keyword">var</span> par <span class="token operator">=</span> ele<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>par<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            l <span class="token operator">+</span><span class="token operator">=</span> par<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> par<span class="token punctuation">.</span>clientLeft<span class="token punctuation">;</span>
            t <span class="token operator">+</span><span class="token operator">=</span> par<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> par<span class="token punctuation">.</span>clientTop<span class="token punctuation">;</span>
            par <span class="token operator">=</span> par<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>left<span class="token punctuation">:</span> l<span class="token punctuation">,</span> top<span class="token punctuation">:</span> t<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取元素已经生成的样式值，兼容IE
     * @param ele 元素
     * @param attr 想要获取样式的属性
     * @returns {Number} 样式值
     */</span>
    <span class="token keyword">function</span> <span class="token function">getCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            val <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ie</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                val <span class="token operator">=</span> ele<span class="token punctuation">.</span>currentStyle<span class="token punctuation">.</span>filter<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// alpha(opacity=55.5)</span>
                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^alpha\(opacity=(\d+(?:\.\d+)?)\)$/</span><span class="token punctuation">;</span>
                val <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                val <span class="token operator">=</span> ele<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^-?\d+(\.\d+)?(px)?$/</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">:</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 设置盒子模型的css样式
     * @param ele 元素
     * @param attr 元素样式属性名
     * @param value 设置的值
     */</span>
    <span class="token keyword">function</span> <span class="token function">setCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> attr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> value<span class="token punctuation">;</span>
            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">'alpha(opacity='</span> <span class="token operator">+</span> value <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'float'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssFloat <span class="token operator">=</span> value<span class="token punctuation">;</span>
            ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>styleFloat <span class="token operator">=</span> value<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//ielow</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/width|height|top|left|right|bottom|(margin|padding)(Left|Right|Top|Bottom)?/</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                value <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'px'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 根据类名获取元素(兼容ielow)
     * @param className 类名
     * @param context 确定查询范围,不传是document
     * @returns {*} 返回符合的元素集合
     */</span>
    <span class="token keyword">function</span> <span class="token function">getElesByClass</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        context <span class="token operator">=</span> context <span class="token operator">||</span> document<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">listToArray</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// for ielow</span>
        <span class="token keyword">var</span> classNameAry <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^ +| +$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/ +/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> tags <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> curTag <span class="token operator">=</span> tags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> isGoodTag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> classNameAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> curClass <span class="token operator">=</span> classNameAry<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^| +)'</span> <span class="token operator">+</span> curClass <span class="token operator">+</span> <span class="token string">'( +|$)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>curTag<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    isGoodTag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            isGoodTag <span class="token operator">&amp;&amp;</span> ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 批量设置元素样式
     * @param ele 元素
     * @param group {width: 100px, float: left}
     */</span>
    <span class="token keyword">function</span> <span class="token function">setGroupCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> key<span class="token punctuation">,</span> group<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 把getCss、setCss、setGroupCss集成为一个方法
     * @param ele 元素名
     * @returns {Number} 如果是获取样式,就返回样式值
     */</span>
    <span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> secondParam <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> thirdParam <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> secondParam <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> thirdParam <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">getCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> secondParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">setCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> secondParam<span class="token punctuation">,</span> thirdParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        secondParam <span class="token operator">=</span> secondParam <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>secondParam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setGroupCss</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> secondParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取n到m间的随机整数
     * @param n
     * @param m
     * @returns {number}
     */</span>
    <span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 判断元素是否有一个类名
     * @param ele
     * @param className
     * @returns {boolean}
     */</span>
    <span class="token keyword">function</span> <span class="token function">hasClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^| +)'</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">'( +|$)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 给元素添加类
     * @param ele
     * @param className
     */</span>
    <span class="token keyword">function</span> <span class="token function">addClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> classAry <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^ +| +$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/ +/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> classAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ele<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">' '</span> <span class="token operator">+</span> classAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 给元素移除类
     * @param ele
     * @param className
     */</span>
    <span class="token keyword">function</span> <span class="token function">removeClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> classAry <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^ +| +$/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/ +/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> curClass <span class="token operator">=</span> classAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> curClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^| +)'</span> <span class="token operator">+</span> curClass <span class="token operator">+</span> <span class="token string">'( +|$)'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ele<span class="token punctuation">.</span>className <span class="token operator">=</span> ele<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取上一个哥哥元素节点
     * @param ele
     * @returns {*}
     */</span>
    <span class="token keyword">function</span> <span class="token function">prev</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ele<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> pre <span class="token operator">=</span> ele<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取下一个弟弟元素节点
     * @param ele
     * @returns {*}
     */</span>
    <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ele<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> nex <span class="token operator">=</span> ele<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>nex <span class="token operator">&amp;&amp;</span> nex<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nex <span class="token operator">=</span> nex<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取所有哥哥元素节点
     * @param ele
     * @returns {Array.&lt;*>}
     */</span>
    <span class="token keyword">function</span> <span class="token function">prevAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> pre <span class="token operator">=</span> <span class="token function">prev</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pre <span class="token operator">=</span> <span class="token function">prev</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取所有弟弟元素节点
     * @param ele
     * @returns {Array}
     */</span>
    <span class="token keyword">function</span> <span class="token function">nextAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> nex <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>nex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            nex <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>nex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取所有兄弟元素节点
     * @param ele
     * @returns {Array.&lt;*>}
     */</span>
    <span class="token keyword">function</span> <span class="token function">siblings</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">prevAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">nextAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取当前元素的索引
     * @param ele
     * @returns {Number}
     */</span>
    <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">prevAll</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">function</span> <span class="token function">children</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStanderBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ary <span class="token operator">=</span> <span class="token function">listToArray</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> childs <span class="token operator">=</span> ele<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tagName <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeName <span class="token operator">!==</span> tagName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    i<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        listToArray<span class="token punctuation">:</span> listToArray<span class="token punctuation">,</span>
        jsonParse<span class="token punctuation">:</span> jsonParse<span class="token punctuation">,</span>
        win<span class="token punctuation">:</span> win<span class="token punctuation">,</span>
        offset<span class="token punctuation">:</span> offset<span class="token punctuation">,</span>
        getCss<span class="token punctuation">:</span> getCss<span class="token punctuation">,</span>
        setCss<span class="token punctuation">:</span> setCss<span class="token punctuation">,</span>
        css<span class="token punctuation">:</span> css<span class="token punctuation">,</span>
        getElesByClass<span class="token punctuation">:</span> getElesByClass<span class="token punctuation">,</span>
        getRandom<span class="token punctuation">:</span> getRandom<span class="token punctuation">,</span>
        hasClass<span class="token punctuation">:</span> hasClass<span class="token punctuation">,</span>
        addClass<span class="token punctuation">:</span> addClass<span class="token punctuation">,</span>
        removeClass<span class="token punctuation">:</span> removeClass<span class="token punctuation">,</span>
        prev<span class="token punctuation">:</span> prev<span class="token punctuation">,</span>
        next<span class="token punctuation">:</span> next<span class="token punctuation">,</span>
        prevAll<span class="token punctuation">:</span> prevAll<span class="token punctuation">,</span>
        nextAll<span class="token punctuation">:</span> nextAll<span class="token punctuation">,</span>
        siblings<span class="token punctuation">:</span> siblings<span class="token punctuation">,</span>
        index<span class="token punctuation">:</span> index<span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> children
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> dom </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端优化]]></title>
      <url>http://yoursite.com/2016/04/06/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<ol>
<li>主动释放堆内存</li>
<li>减少http请求次数</li>
<li>CDN、雪碧图、合并css、js</li>
<li>延迟加载</li>
<li>Ajax 异步加载数据</li>
<li>动画能用css3就不要用JS写</li>
</ol>
<p>(未完待续)</p>
]]></content>
      
        
        <tags>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js面向对象]]></title>
      <url>http://yoursite.com/2016/02/06/a/oop/</url>
      <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul>
<li>命名空间</li>
<li>惰性函数</li>
<li>模块化开发</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> searchRender <span class="token operator">=</span> <span class="token punctuation">{</span>
    change<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    clickEvent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">listToArray</span><span class="token punctuation">(</span>likeAry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        listToArray<span class="token punctuation">:</span> listToArray
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="构造函数-类-模式"><a href="#构造函数-类-模式" class="headerlink" title="构造函数(类)模式 :"></a>构造函数(类)模式 :</h3><p>构造函数模式的目的就是为了创建一个自定义类，并且创建这个 类的实例。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">JsProgrammer</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>writeJs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'My name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' ~~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsProgrammer</span><span class="token punctuation">(</span><span class="token string">'马鑫'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p1<span class="token punctuation">.</span><span class="token function">writeJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsProgrammer</span><span class="token punctuation">(</span><span class="token string">'蝙蝠侠'</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p2<span class="token punctuation">.</span><span class="token function">writeJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>writeJs <span class="token operator">===</span> p2<span class="token punctuation">.</span>writeJs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->false</span>
</code></pre>
<ol>
<li>形成一个私有的作用域，然后 形参赋值-&gt; 预解释-&gt;代码从上到下执行(类和普通函数一样，它也 有普通函数的一面)</li>
<li>代码执行之前，不用再手动的创建对象了， 浏览器会默认的创建一个对象数据类型的值(这个对象 其实就是当前类的一个实例).接下来代码从上到下执行，以当前的实例为执行的主体 (this代表的就是当前的实例)，然后分别的把属性名 和属性值赋值给当前的实例。最后浏览器会默认的把 创建的实例返回<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment" spellcheck="true">//this->f1</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//this->需要看getX执行的时候才知道</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
f1<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//->方法中的this是f1 ->100</span>
<span class="token keyword">var</span> ss <span class="token operator">=</span> f1<span class="token punctuation">.</span>getX<span class="token punctuation">;</span>
<span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->方法中的this是window ->undefined</span>
</code></pre>
</li>
<li>在构造函数模式中new Fn()执行，如果Fn不需要传递参数的 话，后面的小括号可以省略。</li>
<li>this的问题：在类中出现的this.xxx=xxx中的this都是当前 类的实例，而某一个属性值（方法），方法中的this需要看 方法执行的时候，前面是否有“.”才能知道this是谁</li>
<li><p>类有普通函数的一面，当函数执行的时候，var num 其实只 是当前形成的私有作用域中的私有变量而已，它和f1这个实 例没有任何的关系；只有this.xxx=xxx才相当于给f1这个实 例增加私有的属性和方法，才和f1有关系···</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->undefined</span>
</code></pre>
</li>
<li><p>在构造函数模式中，浏览器会默认的把实例返回（返回的是一 个对象数据类型的值）；如果我们自己手动写了return返回：<br> 1) 返回的是一个基本数据类型的值，当前实例是不变的，<br> 2) 返回的是一个引用数据类型的值，当前的实例会被自己 返回的值给替换掉</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"马鑫"</span><span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->{name: "马鑫"}</span>
</code></pre>
</li>
<li><p>检测某一个实例是否属于这个类 -&gt; instanceof</p>
</li>
</ol>
<ul>
<li>每一个数组都是Array这个类的一个实例</li>
<li>每一个函数都是Function这个类的一个实例，无论是实名还是匿名自运行<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Fn</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->true</span>
</code></pre>
因为所有的实例都是对象数据类型的，而每一个对象数据类型都是Object这个内置类的一个实例，所以f1也是它的一个实例</li>
</ul>
<ol>
<li><p>f1和f2都是Fn这个类的一个实例，都拥有x和getX两个属性，但是这两个属性是各自的私有的属性。<br>1)  in: 检测某一个属性是否属于这个对象(attr in object),不管是私有还是公有的属性只要存在，用in检测都是true<br>2)  hasOwnProperty: 用来检测某一个属性是否为这个对象的”私有属性”，这个方法只能检测私有的属性</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>getX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>getX <span class="token operator">===</span> f2<span class="token punctuation">.</span>getX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getX"</span> <span class="token keyword">in</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//->true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'getX'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//->true</span>
</code></pre>
</li>
<li><p>检测某一个属性是否为该对象的”公有属性”？</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hasPubProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>attr <span class="token keyword">in</span>  obj <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasPubProperty</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> <span class="token string">'getX'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//->false</span>
</code></pre>
</li>
<li><p>函数的多重性</p>
</li>
</ol>
<ul>
<li>普通函数  </li>
<li>构造函数(类) </li>
<li>Function这个类的一个实例</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 面向对象 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 继承 封装 多态 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于this]]></title>
      <url>http://yoursite.com/2016/02/06/a/this/</url>
      <content type="html"><![CDATA[<h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><p>只有函数执行才能确定this，this是谁和函数在哪定义的和在哪执行的都没有任何的关系。</p>
<h3 id="区分this"><a href="#区分this" class="headerlink" title="区分this"></a>区分this</h3><ol>
<li>当前函数执行，首先看函数名前面是否有“.”，有的话， “.”前面是谁this就是谁；没有的话this就是window</li>
<li>自执行函数(IIFE)中的this永远是window (严格模式下是undefined)</li>
<li>给元素的某一个事件绑定方法，当事件触发的时候，执行对应的方法，方法中的this是当前的元素</li>
<li>在构造函数模式中，类（函数体）中出现的this.xxx中的this是当前类的一个实例</li>
<li>定时器函数中的this一般是window (严格模式下是undefined)</li>
<li>回调函数中的this一般也是window (严格模式下是undefined)</li>
<li>call、apply、bind都可以强制修改this<br>ps：this只要被其他函数包含，那么this也随之改变了</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name <span class="token punctuation">:</span> <span class="token string">'zf'</span><span class="token punctuation">,</span>
    fun <span class="token punctuation">:</span> print
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span>print<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ary[0]()</span>

window<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//this => window</span>
obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this => obj</span>
ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this => ary</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//fn();</span>
<span class="token comment" spellcheck="true">//obj.fn();</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> fn <span class="token punctuation">:</span> fn <span class="token punctuation">}</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.length</span>

<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> main <span class="token operator">=</span> <span class="token punctuation">{</span>
    fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>
        arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    length <span class="token punctuation">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span>

main<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj</span>
        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="this-和作用域"><a href="#this-和作用域" class="headerlink" title="this 和作用域"></a>this 和作用域</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7 10</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 7</span>
    fn <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只在obj的赋值过程执行一次</span>
        <span class="token comment" spellcheck="true">// var num = 6 7 8</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.num += 2;</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.num += 3     obj.num += 3;</span>
            num<span class="token operator">++</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 对象赋值的过程中，全局变量num修改成了7，私有作用域内的num变成6</span>
<span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局变量fn和obj.fn共同引用自运行函数的返回值。</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 7</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[</span><span class="token comment" spellcheck="true">/*100*/</span><span class="token comment" spellcheck="true">/*,200*/</span><span class="token comment" spellcheck="true">/*,300*/</span><span class="token comment" spellcheck="true">/*,400*/</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  eeefff000
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    ary <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// [100]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>fun <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//obj.fn = eeefff111</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// var ary = eeefff000;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ary <span class="token operator">=</span> ary<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.ary = ary;</span>
    ary<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// eeefff111</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>ary<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window.ary.length--</span>
        ary<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [100] []</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span>fun<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// f = eeefff111</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this => window</span>
obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [], [100]</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ->65</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ->85</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>num<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->240、 120</span>
</code></pre>
<p>把全局变量num的值20赋值给了自执行函数的形参，而不是obj下的30，如果想是obj下的30，需要写obj.num</p>
]]></content>
      
        <categories>
            
            <category> this </category>
            
        </categories>
        
        
        <tags>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包机制及应用]]></title>
      <url>http://yoursite.com/2016/02/06/a/%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>引用数据类型赋值过程 :</p>
<ol>
<li>浏览器先给开辟一块堆内存</li>
<li>如果是对象那么就把键值对当字符串存入到这个内存中，如果是函数那么就把函数体内的代码当作字符串存入内存中</li>
<li>最后把这个地址返回</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>
    total <span class="token operator">=</span>  num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 => 3</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    num1 <span class="token punctuation">:</span> obj<span class="token punctuation">.</span>num
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Cannot read property 'num' of undefined</span>
</code></pre>
<p>在赋值的过程中不能使用obj当前变量</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>当函数执行的时候，就会形成一个私有作用域(栈),这个私有作用域保护私有变量不受外界干扰的这种机制就叫闭包。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
    <span class="token punctuation">}</span>
    <span class="token function">bar</span><span class="token punctuation">(</span> baz <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 妈妈快看呀， 这就是闭包！</span>
<span class="token punctuation">}</span>
</code></pre>
<p>无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到闭包。把内部函数 baz 传递给 bar， 当调用这个内部函数时（ 现在叫作 fn），它涵盖的 foo() 内部作用域的闭包就可以观察到了， 因为它能够访问 a。</p>
<p>传递函数也可以是间接的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    fn <span class="token operator">=</span> baz<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将 baz 分配给全局变量</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这就是闭包！</span>
<span class="token punctuation">}</span> 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
</code></pre>
<p>无论通过何种手段将内部函数传递到所在的词法作用域以外， 它都会持有对原始定义作用域的引用， 无论在何处执行这个函数都会使用闭包。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token function">wait</span><span class="token punctuation">(</span> <span class="token string">"Hello, closure!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>wait(..) 执行 1000 毫秒后， 它的内部作用域并不会消失,timer 函数依然保有 wait(..)作用域的闭包。</p>
<blockquote>
<p>如果将函数（ 访问它们各自的词法作用域） 当作第一级的值类型并到处传递， 你就会看到闭包在这些函数中的应用。 在定时器、 事件监听器、Ajax 请求、 跨窗口通信、 Web Workers 或者任何其他的异步（ 或者同步） 任务中， 只要使用了回调函数， 实际上就是在使用闭包！</p>
</blockquote>
<h4 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域， 使得延迟函数的回调可以将新的作用域封闭在每个迭代内部， 每个迭代中都会含有一个具有正确值的变量供我们访问。</p>
<p>还可以用ES6中的let</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="惰性函数与模块"><a href="#惰性函数与模块" class="headerlink" title="惰性函数与模块"></a>惰性函数与模块</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> MyModules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> modules<span class="token punctuation">[</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> impl<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> impl<span class="token punctuation">,</span> deps <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        define<span class="token punctuation">:</span> define<span class="token punctuation">,</span>
        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">get</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这段代码的核心是 modules[name] = impl.apply(impl, deps)。 为了模块的定义引入了包装函数（ 可以传入任何依赖）， 并且将返回值， 也就是模块的 API， 储存在一个根据名字来管理的模块列表中。</p>
<p>使用它来定义模块：</p>
<pre class=" language-javascript"><code class="language-javascript">MyModules<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Let me introduce: "</span> <span class="token operator">+</span> who<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        hello<span class="token punctuation">:</span> hello
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
MyModules<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> hungry <span class="token operator">=</span> <span class="token string">"hippo"</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">awesome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> bar<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span> hungry <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
    awesome<span class="token punctuation">:</span> awesome
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> MyModules<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span> <span class="token string">"bar"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> MyModules<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span> <span class="token string">"foo"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    bar<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span> <span class="token string">"hippo"</span> <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Let me introduce: hippo</span>
foo<span class="token punctuation">.</span><span class="token function">awesome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// LET ME INTRODUCE: HIPPO</span>
</code></pre>
<p>“foo” 和 “bar” 模块都是通过一个返回公共 API 的函数来定义的。 “foo” 甚至接受 “bar” 的示例作为依赖参数， 并能相应地使用它。<br>ES6中用import、export</p>
<h3 id="作用域-栈-不释放"><a href="#作用域-栈-不释放" class="headerlink" title="作用域(栈)不释放"></a>作用域(栈)不释放</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个tatal=120就被保存下来了</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 120</span>
        total <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fn函数中的120既然被保存下来了，那么就可以被修改。</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 220</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>全局变量f占用return出来的匿名函数，符合fn执行形成的作用域不被释放的条件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> xx <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">fyy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        window<span class="token punctuation">.</span>yy <span class="token operator">=</span> fyy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如果不return出来，那么可以到函数内部去占用这个返回值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#div1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dom对象</span>
<span class="token comment" spellcheck="true">// typeof div1</span>
<span class="token keyword">function</span> <span class="token function">fzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    <span class="token keyword">function</span> <span class="token function">zz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自身累加1</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/*
    *  div1的onclick属性占用fzz函数中zz函数
    *  fzz函数执行的时候形成的作用域没有释放
    *  count的值就被保存下来了
    */</span>
    div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> zz<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div1<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1  => 主动触发这个事件</span>
div1<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
div1<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token comment" spellcheck="true">// 点击的时刻可以继续执行下去</span>

div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>在绑定事件过程中，也有可能和作用域不释放参合在一起</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>不立刻释放作用域</p>
]]></content>
      
        <categories>
            
            <category> 作用域 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[作用域不释放]]></title>
      <url>http://yoursite.com/2016/02/06/a/%E6%A0%88%E5%86%85%E5%AD%98%E4%B8%8D%E9%87%8A%E6%94%BE/</url>
      <content type="html"><![CDATA[<p>关于作用域不释放的小练习：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->25</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->28</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->27</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->29</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->30</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//->9</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->21</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->32</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->21</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->31</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1] => []</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">{</span>
    z<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
    z <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1]</span>
    z<span class="token punctuation">[</span>z<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,3]</span>
    <span class="token comment" spellcheck="true">//var z;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">fx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> fx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> f3 <span class="token operator">=</span> f2<span class="token punctuation">;</span>
<span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f1 <span class="token operator">=</span> f3<span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//2324345</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        n <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n*=2  n = n + n</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> foo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个f占用的是fn(第一次)执行的返回值</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个f占用fn(第二次)执行的返回值</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>
<span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span>

f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从这行代码开始f占用第四次fn执行返回值,和第一次已经脱离关系</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f <span class="token operator">=</span> f1<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 40</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> fx <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sum函数第一次执行返回的那个匿名函数</span>
<span class="token function">fx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span>

<span class="token keyword">var</span> fy <span class="token operator">=</span> fx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把fx拿到的第一次那个匿名函数的地址告诉fy一个。</span>
<span class="token function">fy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此刻fy函数执行和fx执行的效果完全一样</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    num <span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    fn <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> f<span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//6789</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 作用域 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 作用域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中的事件机制]]></title>
      <url>http://yoursite.com/2016/02/06/a/JS%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="鼠标事件对象："><a href="#鼠标事件对象：" class="headerlink" title="鼠标事件对象："></a>鼠标事件对象：</h3><h4 id="产生："><a href="#产生：" class="headerlink" title="产生："></a>产生：</h4><p>标准浏览器中事件对象e存在于绑定的函数中，在ie8-中这个事件对象在window.event属性上。<br>e = e || window.event</p>
<p>clientX：鼠标点击位置相对于窗口的X轴坐标<br>clientY： 鼠标点击位置相对于窗口的Y轴坐标</p>
<h4 id="事件兼容"><a href="#事件兼容" class="headerlink" title="事件兼容"></a>事件兼容</h4><p>事件对象：</p>
<pre class=" language-javascript"><code class="language-javascript">e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event
</code></pre>
<p>事件源：</p>
<pre class=" language-javascript"><code class="language-javascript">e<span class="token punctuation">.</span>target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>
</code></pre>
<p>e.pageX: 鼠标位置相对于页面的X轴坐标<br>e.pageY: 鼠标位置相对于页面的Y轴坐标</p>
<pre class=" language-javascript"><code class="language-javascript">e<span class="token punctuation">.</span>pageX <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">||</span> e<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span>pageY <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">||</span> e<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>阻止默认行为:</p>
<pre class=" language-javascript"><code class="language-javascript">e<span class="token punctuation">.</span>preventDefault <span class="token operator">?</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre>
<p>未完待续…</p>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux常用命令]]></title>
      <url>http://yoursite.com/2016/02/06/base/linux_cmd/</url>
      <content type="html"><![CDATA[<p>pwd : 显示当前所在的位置<br>cd /aaa ： 进入aaa这个文件夹<br>cd ../ : 退出当前路径<br>cd ../../ : 一次退出两部<br>rm -rf : 删除<br>mkdir : 新建文件夹<br>ls ： 查看当前路径有多少内容<br>vim : 编辑</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[变量提升]]></title>
      <url>http://yoursite.com/2016/02/06/a/variable_hosting/</url>
      <content type="html"><![CDATA[<h3 id="预解释"><a href="#预解释" class="headerlink" title="预解释"></a>预解释</h3><p><code>undefined</code>:</p>
<ol>
<li>读取一个对象根本不存在的属性</li>
<li>定义形参执行的时候没有传参数</li>
<li>如果函数没有写return那么默认返回undefined</li>
<li>在预解释的时刻，var声明的变量在赋值之前是undefined</li>
</ol>
<p>预解释发生在哪里</p>
<blockquote>
<ul>
<li>使用var关键字声明的变量</li>
<li>使用function 关键字声明的函数<br>区别： var只声明但是没有赋值，默认undefined。使用function声明的函数在预解释阶段就已经赋值结束</li>
</ul>
</blockquote>
<p>私有变量和全局变量</p>
<blockquote>
<ul>
<li>私有变量 ： 定义在函数体内部的变量</li>
<li>全局变量 ： 定义在全局作用域内(没有任何函数包含的变量)</li>
</ul>
</blockquote>
<p>私有作用域和全局作用域:</p>
<blockquote>
<ul>
<li>私有作用域 ： 只要函数运行就会形成一个私有作用域</li>
<li>全局作用域 ：  只要打开一个网页就会形成全局作用域</li>
</ul>
</blockquote>
<p>函数的执行过程 ： </p>
<blockquote>
<ul>
<li>形成私有作用域(栈内存)</li>
<li>形参赋值（形参也相当于在函数体内部声明的私有变量）</li>
<li>预解释函数体内部的var和function</li>
<li>代码执行</li>
</ul>
<p>堆内存 :   用来存储引用数据类型值占用的内存是堆内存<br>栈内存 ： 代码运行时刻占用的内存是栈内存。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined => 打印并没有报错，说明num已经被声明过。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数体 => 说明赋值也结束了</span>

<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arguments<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//console.log(fn);</span>
    <span class="token comment" spellcheck="true">//console.log(num2);</span>
    num2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    num2 <span class="token operator">=</span> num2 <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">var</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 私有变量 定义在函数内部的变量</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此刻执行也只是把foo内部自己的私有num2修改。全局依然是100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [100,200,300]</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// a 获取到的就是[100,200]这个数组的引用地址</span>
    a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 操作的就是传进来引用地址所对应的那个数组a => [100,200,300]</span>
    a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回一个和原数组相同的数组（新数组）</span>
    <span class="token comment" spellcheck="true">// a = [100,200,300];</span>
    a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [100,200,300,400]</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//var a;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个声明c的动作在形参赋值阶段已经结束。但是这个赋值动作还是要执行的。</span>
<span class="token punctuation">}</span>

<span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ol>
<li>如何区分私有变量和全局变量？<br>1)  在全局作用域下声明（预解释的时候）的变量是全局变量<br>2)  在私有作用域中声明的变量和函数的形参都是私有的变量;在私有作用域中，代码执行的时候遇到了一个变量，首先需要确定他是否为私有的变量，如果是私有的变量,那么和外面的没任何的关系；如果不是私有的，则往当前作用域的上级作用域进行查找，如果上级作用域也没有则继续查找，一直找到window位置…(<code>作用域链</code>)</li>
<li>当函数执行的时候（直接目的：让函数体中的代码执行）<br>首先会形成一个新的作用域，按照如下的步骤执行：<br>1)  如果有形参，先给形参赋值<br>2)  进行私有作用域中的预解释<br>3)  私有作用域中的代码从上到下执行<br>···<br>函数形成一个新的私有的作用域保护了里面的私有变量不受外界的干扰（外面修改不了私有的，私有的也修改不了外面的）</li>
</ol>
<ul>
<li>“<code>闭包</code>“&lt;机制&gt;  </li>
<li>闭包形成的前提条件是函数执行</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-> undefined</span>
<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">/*
*   total不是私有的，找全局下的total,
*   也就是在这里出现的所有的total都是全局的0
*/</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    total <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全局的total=300</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//300</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//300</span>
</code></pre>
<h4 id="全局作用域下var带和不带的区别"><a href="#全局作用域下var带和不带的区别" class="headerlink" title="全局作用域下var带和不带的区别"></a>全局作用域下var带和不带的区别</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ->12</span>

num2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ->12 window.num2</span>
</code></pre>
<p><code>区别</code>：带var的可以进行预解释，所以在赋值的前面执行不会报错；不带var的不能进行预解释，在前面执行会报错<br><code>关系</code>：num2 = 12 -&gt; 相当于给window增加了一个叫做num2的属性名,属性值是12；<br>var num = 12 -&gt; 首先他相当于给全局作用域增加了一个全局变量num,他也相当于给window增加了一个属性名num,属性值是12</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    total <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>私有作用域中出现的一个变量不是私有的，则往上级作用域进行查找，上级没有则继续向上查找，一直找到window为止，如果window下也没有呢？</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//Uncaught ReferenceError: total is not defined</span>

        total <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -></span>
</code></pre>
<p>JS中如果在不进行任何特殊处理的情况下，上面的代码报错，<br>后面的代码都不再执行了</p>
<p>获取值：console.log(total); -&gt;报错了<br>设置值：total = 100; (先把上面代码报错那一行注释掉)相当于给window增加了一个属性名total,属性值是100</p>
<h4 id="如何查找当前作用域的上一级作用域？"><a href="#如何查找当前作用域的上一级作用域？" class="headerlink" title="如何查找当前作用域的上一级作用域？"></a>如何查找当前作用域的上一级作用域？</h4><p>看当前函数是在那个作用域下定义的，那么它的上级作用域就是谁，和函数在哪执行的没有任何的关系</p>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> variable hosting </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM操作和样式操作库的封装]]></title>
      <url>http://yoursite.com/2016/01/29/base/DOM/</url>
      <content type="html"><![CDATA[
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title></title>
    <style>
        * {
            font-size: 14px;
        }

        html, body {
            /*background-color: #000;*/
            /*color: #fff;*/
        }
    </style>
<link rel="stylesheet" href="/css/prism-solarizedlight.css" type="text/css"><script src="/js/prism.js"></script></head>
<body>
<article class="article-container"><h3 class="title">DOM操作和样式操作库的封装</h3>
    <div class="article__content article-content" style="height: auto;"><h3>一、DOM常用方法和属性</h3>
        <p>以下粗略的罗列一下DOM的常用方法和属性，由于不是介绍DOM的基础内容，所以就不一一详细说明各个方法和属性了（学习DOM的封装的，一般都对基础DOM比较熟悉了）。</p>
        <strong>1.1、获取页面中元素的方法</strong>
        <ul>
            <li><p>document.getElementById</p></li>
            <li><p>context.getElementsByTagName：把指定容器中子孙容器中所有标签名为TAGNAME的都获取到了</p></li>
            <li><p>document.getElementsByName：在IE浏览器中只对表单元素的name起作用</p></li>
            <li><p>document.body || document.documentElement</p></li>
            <li><p>context.querySelector、context.querySelectorAll：在IE6~8下不兼容，通过这个获取到的节点集合，不存在DOM映射</p></li>
        </ul>
        <strong>1.2、描述节点和节点之间关系的属性</strong>
        <ul>
            <li><p>childNodes</p></li>
            <li><p>children：在IE6~8下获取的结果和标准浏览器获取的结果不一致</p></li>
            <li><p>parentNode</p></li>
            <li><p>previousSibling/previousElementSibling</p></li>
            <li><p>nextSibling/nextElementSibling</p></li>
            <li><p>lastChild/lastElementChild</p></li>
            <li><p>firstChild/firstElementChild</p></li>
        </ul>
        <strong>注意：</strong>
        <ol>
            <li><p>在标准浏览器中会把空格和换行当做文本节点处理</p></li>
            <li><p>所有带Element的属性在IE6~8中都不兼容</p></li>
        </ol>
        <strong>1.3、DOM的增删改</strong>
        <ul>
            <li><p>createElement</p></li>
            <li><p>document.createDocumentFragment</p></li>
            <li><p>appendChild</p></li>
            <li><p>insertBefore</p></li>
            <li><p>cloneNode(true/false)</p></li>
            <li><p>replaceChild</p></li>
            <li><p>removeChild</p></li>
            <li><p>get/set/removeAttribute</p></li>
        </ul>
        <h3>二、获取元素的方法封装</h3><strong>2.1、获取某一个容器的元素子节点（children）</strong>
        <p>首先获取所有的子节点（childNodes），在所有的子节点中，把元素节点过滤出来（nodeType===1的时候代表的是元素节点）。</p>
        <p>如果该方法传递两个参数，第二个参数是一个标签名的话，我们还要在获取的子元素中把对应标签名进行二次筛选。</p>
        <pre><code>function children(curEle, tagName) {
    var ary = ;
    // --&gt; IE6~8不能使用内置的children属性，我们自己写代码实现
    if(/MSIE (6|7|8)/i.test(navigator.userAgent)) {
        var nodeList = curEle.childNodes;
        for (var i = 0, len = nodeList.length; i &lt; len; i++){
        var curNode = nodeList[i];
        if (curNode.nodeType === 1) {
            ary[ary.length] = curNode;
        }
    }
        nodeList = null;
    } else {
        // 标准浏览器中，我们直接使用children即可，但是这样获取的是一个元素集合（类数组），为了和IE6~8下保持一致，我们借用数组原型上的slice，实现把类数组转换为数组。
        ary = Array.prototype.slice.call(curEle.children);
    }

    // --&gt; 二次筛选
    if (typeof tagName === 'string') {
        for (var k = 0; k &lt; ary.length; k++) { // 数组长度会减小的情况，必须要使用这样的方式判断长度，不能和上面一样
            var curEleNode = ary[k];
            if (curEleNode.nodeName.toLowerCase !== tagName.toLowerCase) {
                // --&gt; 不是我想要的标签
                ary.splice(k, 1);
                k --;
            }
        }
    }

    return ary;
}</code></pre>
        <p>这个方法中，判断是否是IE6~8用的是正则：<code>/MSIE (6|7|8)/i.test(navigator.userAgent)</code>，而在封装DOM库的时候，在很多地方都要判断是否是IE6~8，我们可以每次都判断一次是不是IE6~8....不过，如果我们只判断一次，然后在所有的方法中都用，那是不是更好呢？....这就是JavaScript库封装中常用的惰性思想。
        </p><strong>2.2、封装库的惰性思想</strong>
        <p>我们封装库的方式使用单例的方式，然后将单例放到一个自执行函数中，基本的形式为：</p>
        <pre><code>var utils = (function  {
    function children(curEle, tagName) {
        // ...
    }

    return {
        children: children
    }
});</code></pre>
        <p>这时候我们可以将判断是否是IE6~8的方法，放在自执行函数中，然后在具体的方法中使用：</p>
        <pre><code>var utils = (function  {
    var flag = "getComputedStyle" in window;
    function children(curEle, tagName) {
        if(!flag){
 // IE6~8的情况
        } else {
 // 非IE6~8
        }
    }

    return {
        children: children
    }
});</code></pre>
        <p>在自执行函数中的flag变量不销毁，存储的是判断当前浏览器是否兼容getComputedStyle，兼容的话是标准浏览器，但是如果<code>flag=false</code>，说明当前浏览器是IE6~8。</p>
        <p>
            惰性思想：惰性思想是JavaScript搞基编程技巧之一，在第一次给utils赋值的时候就已经把兼容处理好了，把最后结果存放在flag变量中，以后在每一个方法中，只要是IE6~8不兼容的，我们不需要重新检测，只需要使用flag的值即可。</p>
        <p>那么用这种方式来改造当前的类库：</p>
        <pre><code>var utils = (function  {
    var flag = "getComputedStyle" in window;
    function children(curEle, tagName) {
        var ary = ;
        if (!flag) {
             var nodeList = curEle.childNodes;
             for (var i = 0, len = nodeList.length; i &lt; len; i++) {
             var curNode = nodeList[i];
             curNode.nodeType === 1 ? ary[ary.length] = curNode : null;
         }
            nodeList = null;
        } else {
     ary = this.listToArray(curEle.children);
            }
            if (typeof tagName === "string") {
     for (var k = 0; k &lt; ary.length; k++) {
     var curEleNode = ary[k];
     if (curEleNode.nodeName.toLowerCase !== tagName.toLowerCase) {
     ary.splice(k, 1);
     k--;
     }
     }
            }
            return ary;
    }

    return {
        children: children
    }
});</code></pre>
        <p>将之前几篇文章中封装的几个工具方法也加入该类库中（文章最后有该类库的下载地址）：</p>
        <p class="img-wrapper-embedded" style="width: 100%; min-height: 119.567px;"><img src="http://p9.pstatp.com/large/18f3000a9b986d6d4ccd" img_width="638" img_height="234" alt="DOM操作和样式操作库的封装" onerror="javascript:errorimg.call(this);" data-index="0"></p>
        <p>工具方法加入类库.png</p><strong>2.3、获取上一个兄弟元素节点（prev）</strong>
        <p>首先获取当前元素的上一个哥哥节点，判断是否为元素节点，不是的话基于当前的节点继续找上面的哥哥节点.....一直找到哥哥元素节点为止，如果没有哥哥节点，返回null即可。</p>
        <pre><code>function prev(curEle) {
    if (flag) {
        return curEle.previousElementSibling;
    }
    var pre = curEle.previousSibling;
    while (pre &amp;&amp; pre.nodeType !== 1) {
        pre = pre.previousSibling;
    }
    return pre;
}</code></pre>
        <strong>2.4、获取下一个兄弟元素节点（next）</strong>
        <pre><code>function next(curEle) {
    if (flag) {
        return curEle.nextElementSibling;
    }
    var nex = curEle.nextSibling;
    while (nex &amp;&amp; nex.nodeType !== 1) {
        nex = nex.nextSibling;
    }
    return nex;
}</code></pre>
        <strong>2.5、获取前面所有的兄弟元素节点（prevAll）</strong>
        <pre><code>function prevAll(curEle) {
    var ary = ;
    var pre = this.prev(curEle);
    while (pre) {
        ary.unshift(pre);
        pre = this.prev(pre);
    }
    return ary;
}</code></pre>
        <strong>2.6、获取后面所有的兄弟元素节点（nextAll）</strong>
        <pre><code>function nextAll(curEle) {
    var ary = ;
    var nex = this.next(curEle);
    while (nex) {
        ary.push(nex);
        nex = this.next(nex);
    }
    return ary;
}</code></pre>
        <strong>2.7、获取相邻的两个元素节点（sibling）</strong>
        <pre><code>function sibling(curEle) {
    var pre = this.prev(curEle);
    var nex = this.next(curEle);
    var ary = ;
    pre ? ary.push(pre) : null;
    nex ? ary.push(nex) : null;
    return ary;
}</code></pre>
        <strong>2.8、获取所有的兄弟元素节点（siblings）</strong>
        <pre><code>function siblings(curEle) {
    return this.prevAll(curEle).concat(this.nextAll(curEle));
}</code></pre>
        <strong>2.9、获取当前元素的索引（index）</strong>
        <pre><code>function index(curEle) {
    return this.prevAll(curEle).length;
}</code></pre>
        <strong>2.10、获取第一个元素子节点（firstChild）</strong>
        <pre><code>function firstChild(curEle) {
    var chs = this.children(curEle);
    return chs.length &gt; 0 ? chs[0] : null;
}</code></pre>
        <strong>2.11、获取最后一个元素子节点（lastChild）</strong>
        <pre><code>function lastChild(curEle) {
    var chs = this.children(curEle);
    return chs.length &gt; 0 ? chs[chs.length - 1] : null;
}</code></pre>
        <h3>三、操作元素的方法封装</h3><strong>3.1、向指定容器的末尾追加元素（append）</strong>
        <pre><code>function append(newEle, container) {
    container.appendChild(newEle);
}</code></pre>
        <strong>3.2、向指定容器的开头追加元素（prepend）</strong>
        <p>把新的元素添加到容器中第一个子元素节点的前面,如果一个元素子节点都没有,就放在末尾即可。</p>
        <pre><code>function prepend(newEle, container) {
    var fir = this.firstChild(container);
    if (fir) {
        container.insertBefore(newEle, fir);
        return;
    }
    container.appendChild(newEle);
}</code></pre>
        <strong>3.3、把新元素(newEle)追加到指定元素(oldEle)的前面（insertBefore）</strong>
        <pre><code>function insertBefore(newEle, oldEle) {
    oldEle.parentNode.insertBefore(newEle, oldEle);
}</code></pre>
        <strong>3.4、把新元素(newEle)追加到指定元素(oldEle)的后面（insertAfter）</strong>
        <p>相当于追加到oldEle弟弟元素的前面,如果弟弟不存在,也就是当前元素已经是最后一个了,我们把新的元素放在最末尾即可。</p>
        <pre><code>function insertAfter(newEle, oldEle) {
    var nex = this.next(oldEle);
    if (nex) {
        oldEle.parentNode.insertBefore(newEle, nex);
        return;
    }
    oldEle.parentNode.appendChild(newEle);
}</code></pre>
        <h3>四、操作样式的方法封装</h3><strong>4.1、验证当前元素中是否包含className这个样式类名（hasClass）</strong>
        <pre><code>function hasClass(curEle, className) {
    var reg = new RegExp("(^| +)" + className + "( +|$)");
    return reg.test(curEle.className);
}</code></pre>
        <strong>4.2、给元素增加样式类名（addClass）</strong>
        <pre><code>function addClass(curEle, className) {
    var ary = className.replace(/(^ +| +$)/g, "").split(/ +/g);
    for (var i = 0, len = ary.length; i &lt; len; i++) {
        var curName = ary[i];
        if (!this.hasClass(curEle, curName)) {
            curEle.className += " " + curName;
        }
    }
}</code></pre>
        <strong>4.3、给元素移除样式类名（removeClass）</strong>
        <pre><code>function removeClass(curEle, className) {
    var ary = className.replace(/(^ +| +$)/g, "").split(/ +/g);
    for (var i = 0, len = ary.length; i &lt; len; i++) {
        var curName = ary[i];
        if (this.hasClass(curEle, curName)) {
            var reg = new RegExp("(^| +)" + curName + "( +|$)", "g");
            curEle.className = curEle.className.replace(reg, " ");
        }
    }
}</code></pre>
        <strong>4.5、通过元素的样式类名获取一组元素集合（getElementsByClass）</strong>
        <pre><code>function getElementsByClass(strClass, context) {
    context = context || document;
    if (flag) {
        return this.listToArray(context.getElementsByClassName(strClass));
    }
    //-&gt;IE6~8
    var ary = , strClassAry = strClass.replace(/(^ +| +$)/g, "").split(/ +/g);
    var nodeList = context.getElementsByTagName("*");
    for (var i = 0, len = nodeList.length; i &lt; len; i++) {
        var curNode = nodeList[i];
        var isOk = true;
        for (var k = 0; k &lt; strClassAry.length; k++) {
            var reg = new RegExp("(^| +)" + strClassAry[k] + "( +|$)");
            if (!reg.test(curNode.className)) {
                isOk = false;
                break;
            }
        }
        if (isOk) {
            ary[ary.length] = curNode;
        }
    }
    return ary;
}</code></pre>
        <h3>五、样式的设置和获取相关的方法</h3><strong>5.1、获取元素的样式值（getCss）</strong>
        <pre><code>function getCss(attr) {
    var val = null, reg = null;
    if (flag) {
        val = window.getComputedStyle(this, null)[attr];
    } else {
        if (attr === "opacity") {
            val = this.currentStyle["filter"];
            reg = /^alpha\(opacity=(\d+(?:\.\d+)?)\)$/;
            val = reg.test(val) ? reg.exec(val)[1] / 100 : 1;
        } else {
            val = this.currentStyle[attr];
        }
    }
    reg = /^(-?\d+(\.\d+)?)(px|pt|em|rem)?$/;
    return reg.test(val) ? parseFloat(val) : val;
}</code></pre>
        <strong>5.2、给当前元素的某一个样式属性设置值(增加在行内样式上的)</strong>
        <pre><code>function setCss(attr, value) {
    if (attr === "float") {
        this["style"]["cssFloat"] = value;
        this["style"]["styleFloat"] = value;
        return;
    }
    if (attr === "opacity") {
        this["style"]["opacity"] = value;
        this["style"]["filter"] = "alpha(opacity=" + value * 100 + ")";
        return;
    }
    var reg = /^(width|height|top|bottom|left|right|((margin|padding)(Top|Bottom|Left|Right)?))$/;
    if (reg.test(attr)) {
        if (!isNaN(value)) {
            value += "px";
        }
    }
    this["style"][attr] = value;
}</code></pre>
        <strong>5.3、给当前元素批量的设置样式属性值（setGroupCss）</strong>
        <pre><code>function setGroupCss(options) {
    for (var key in options) {
        if (options.hasOwnProperty(key)) {
            setCss.call(this, key, options[key]);
        }
    }
}</code></pre>
        <strong>5.4、实现了获取、单独设置、批量设置元素的样式值（css）</strong>
        <pre><code>function css(curEle) {
    var argTwo = arguments[1], ary = Array.prototype.slice.call(arguments, 1);
    if (typeof argTwo === "string") {
        if (typeof arguments[2] === 'undefined') {
            return getCss.apply(curEle, ary);
        }
        setCss.apply(curEle, ary);
    }
    argTwo = argTwo || 0;
    if (argTwo.toString === "[object Object]") {
        setGroupCss.apply(curEle, ary);
    }
}</code></pre>
        <h3>六、总结</h3>
        <p>以上的所有方法中，方法名大部分和jQuery中的类似，getElementsByClass方法在jQuery中没有实现，但是jQuery的一部分选择器也是基于这个方法原理来实现的。</p>
        <p>firstChild、lastChild在jQuery中没有。</p></div>

</article>
</body>
</html>]]></content>
      
        <categories>
            
            <category> dom </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符串基础]]></title>
      <url>http://yoursite.com/2015/06/29/base/string/</url>
      <content type="html"><![CDATA[<p> 一个字符串是有多个字符组成的</p>
<p>str.length获取字符串中字符的个数（字符串的长度）字符串中也存在索引，也是从0开始的，’w’这个字符的索引就是0<br>空格、换行也是一个字符；</p>
<ol>
<li>charAt（索引）获取指定索引位置的字符<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
charCodeAt（索引）获取指定索引位置的字符对应的ASCII值<br>ASCII值：每一个字母、汉字、特殊符号都有一个对应的码值（Unicode）</li>
<li>字符串截取<br>substr（n，m）从索引n（包含n）开始截取m个字符，<br>substring（n,m）从索引n开始，找到索引m处（不包含m）将找到字符返回<br>slice（n,m）从索引n开始，找到索引m处（不包含m），将找到的字符返回slice支持，负数作为索引，str.length+负数索引，如果只写了一个n，没有m,截取到末尾<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>查找字符的索引<br>indexOf（字符）：获取指定字符在字符串中第一次出现的索引位置<br>lastIndexOf（字符）：获取指定字符在字符串中最后一次出现的索引位置<br>如果没有这个字符，返回的是-1，基于这个理念我们经常用这两个方法判断字符串中是否包含某个字符<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'代表包含e这个字符'</span><span class="token punctuation">}</span>
</code></pre>
</li>
<li>大小写转换<br>toLowerCase:将所有字母转换为小写<br>toUpperCase：将所有字母转换为大写<pre class=" language-javascript"><code class="language-javascript">str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
</li>
<li><p>替换<br>var str=”welcome! to beijing my name liwenli!”;<br>replace（要替换的老字符，替换成的新字符）</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"welcome"</span><span class="token punctuation">,</span><span class="token string">"woaini"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>在不使用正则的情况下，每一次调用方法只能替换一次<br>一般情况下，用正则处理</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/l/g</span><span class="token punctuation">,</span><span class="token string">"j"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将所有l换成j</span>
</code></pre>
</li>
<li><p>split（分割符）<br>将字符串按照指定的分隔符拆分成数组的每一项，和数组中的join对应；<br>```javascript<br>var str=”1+2+3+4+8”;<br>console.log(str.split(“+”)); // [“1”, “2”, “3”, “4”, “8”]</p>
</li>
</ol>
<p>var str=”1+2+3+4+8”;<br>console.log(str.split(“”)); //如果没有拆分符“+”就会每一项给拆分<br>// [“1”, “+”, “2”, “+”, “3”, “+”, “4”, “+”, “8”]</p>
<pre><code>7. trim():
去除首尾空格
```javascript
var str = &#39;  ni hao   &#39;
str.trimLeft(); // &quot;ni hao   &quot;

str.trimRight(); // &quot;  ni hao&quot;
</code></pre><ol>
<li>search(“a”)<br>查找字符在字符串中出现位置的索引值</li>
</ol>
<ol>
<li>match？正则常用的</li>
</ol>
<p>拼接字符串</p>
<ol>
<li>单双引号不能同时使用 str+=”<div class="bg"></div>“;</li>
<li>在字符串中拼接变量，最外面用的是””，里面就写”+变量+”（外面用’’同理），<br>var num=2; str+=”<span class="bg"+num+""></span>“;</li>
<li>使用转译字符</li>
</ol>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的数组排序]]></title>
      <url>http://yoursite.com/2015/05/30/base/sort/</url>
      <content type="html"><![CDATA[<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>方法一：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>方法二：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fixArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        obj<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">fixArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>当前项和后一项进行比较，如果当前项大于后一项就交换位置</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 控制比较轮数</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 控制比较次数</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">65146</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">854</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ary<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>思路：</p>
<ol>
<li>求出中间值的索引；</li>
<li>通过索引找到中间值；4；</li>
<li>创建两个数组：left; right;</li>
<li>遍历数组中的每一项，让每一项跟4中间值进行比较；比他大的，放右边，比他小的放左边；</li>
<li>left.concat(16,right)</li>
<li>–函数自己调用自己；–递归</li>
<li>停止拆分的条件：当数组的长度&lt;=1的时候；直接返回数组</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//停止拆分的条件；-如果满足停止拆分，阻断后续代码的执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ary<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return：1）返回值 2）阻断程序执行；</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//1.求出中间值的索引；</span>
    <span class="token keyword">var</span> point <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//2.通过索引找到中间值；4；</span>
    <span class="token keyword">var</span> pointValue <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//3.创建两个数组：left=[]; right=[]</span>
    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//4.遍历数组中的每一项，让每一项跟16中间值进行比较；比他大的，放右边，比他小的放左边；</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> pointValue <span class="token operator">?</span> right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>pointValue<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">65146</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">854</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ary<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>思路：</p>
<ol>
<li>先拎出一个数组； ary.splice(0,1)=&gt;[98]</li>
<li>遍历ary数组中的每一项；分别跟[4,16,28,88,98]数组进行比较：</li>
</ol>
<p>插排的核心：拿ary数组中的每一项，跟left数组从后往前的比较，比他小，继续往前比较，比他大，放到他下一项的前面。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//1.先拎出一个数组；</span>
    <span class="token keyword">var</span> left <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//2.拿ary数组中的每一项，跟left数组从后往前的比较，比他小，继续往前比较，比他大，放到他下一项的前面；</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cur <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> left<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> left<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//判断比到头了</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    left<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">65146</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">854</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组的常用方法]]></title>
      <url>http://yoursite.com/2015/05/29/base/array/</url>
      <content type="html"><![CDATA[<p>数组是值的有序集合，数组中每一项的值没有类型限制.</p>
<ul>
<li>数组定义<br>数组直接量创建：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
构造函数的方式创建：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre>
</li>
</ul>
<h3 id="数组添加和删除"><a href="#数组添加和删除" class="headerlink" title="数组添加和删除"></a>数组添加和删除</h3><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>向数组末尾添加一个或多个元素<br>返回：新数组的长度<br>原数组：改变</p>
<h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>向数组开头添加一个或多个元素<br>返回：新数组的长度<br>原数组：改变</p>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>连接两个或是多个数组<br>返回：一个被连接后的数组<br>原数组：不改变<br>arr.concat(arr1, arr2…arrN)</p>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>删除数组最后一项,数组length值减1，如果数组已经为空，返回undefined<br>返回：被删除的那一项的值<br>原数组：改变</p>
<h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>删除数组第一项,数组length值减1<br>返回：被删除的那一项的值<br>原数组：改变</p>
<h3 id="slice-和-splice-方法"><a href="#slice-和-splice-方法" class="headerlink" title="slice 和 splice 方法"></a>slice 和 splice 方法</h3><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>从已有的数组中返回规定的元素，<br>返回：一个新数组，包含从索引start到索引end(注意：不包含索引为end的这个元素)<br>原数组：不改变<br>不传参数：将原数组复制一份<br>一个参数：从此处一直截取到数组末尾结束，如果这个参数为负数，负几就从倒数第几开始截取数组<br>两个参数：start 到 end 不包括end</p>
<h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>可以用于对数组执行添加、删除、修改的功能<br>返回：被删除的项所组成的一个新数组<br>原数组：改变<br>使用语法：arr.splice(index, delCount, item1, item2…itemN);</p>
<ul>
<li>插入功能（只插入）：arr.splice(start, 0, args); 在索引为start项前面插入args，返回空数组（因为没有删除），原数组改变</li>
<li>替换功能（删除和插入）：arr.splice(start, delCount, args);</li>
<li>删除功能（只删除）: arr.splice(start, delCount); 返回的是被删除的元素数组，若没有删除任何元素，则返回空数组。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ary<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ary<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向数组末尾添加新的属性值</span>
ary<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除末尾项</span>
ary<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向数组开始添加新的属性值</span>
ary<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除数组首相</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从索引n开始，删除m个</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从索引n开始删除m个，将x添加到删除位置</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将x添加到索引n的前面</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原数组清空，返回一个和原数组一样的新数组</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将x添加到数组开头</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向数组末尾添加</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除末尾项</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除末尾项</span>
ary<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除末尾项</span>
<span class="token comment" spellcheck="true">//以上所有的方法都会改变原数组</span>
ary<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原数组不变返回一个空数组</span>

ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从索引n开始，查找到索引m处（不包含m），返回截取到的新数组</span>
ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//克隆一份和原数组一致的新数组</span>
<span class="token comment" spellcheck="true">//slice不会改变原数组</span>

<span class="token comment" spellcheck="true">//拼接</span>
ary<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼接数组，如果没有传递参数，那么他的作用是克隆一份新数组</span>
</code></pre>
<h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><p>数值、布尔值、对象和字符串都有toString方法，但null和undefined没有此方法<br>如果给toString传递参数，可以是2,8,16，将数字转化为相应进制<br>js在进行某些数据类型转换时，会隐式的调用toString方法。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">testType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h3><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>颠倒数组中元素的顺序<br>不需要传参<br>返回：改变后的原数组本身<br>原数组：改变</p>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>在原数组上进行排序<br>不传参 arr.sort(); 按ASCII码字母顺序对数组中的元素进行排序。<br>在需要标准排序时，可以将函数直接量作为该方法的传参，从而实现排序，比如：对DOM元素排序，对对象的排序。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> aNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">543</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
aNum<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>上面例子中<br>回调函数的参数a, b是数组中两项从左到右按个每项的值<br>如果 a - b 的值是小于0的值 不调换位置<br>如果 a - b 的值是大于0的值 调换位置<br>a - b 从小到大<br>b - a 从大到小</p>
<p>带单位的排序方法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> aNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'33px'</span><span class="token punctuation">,</span> <span class="token string">'22px'</span><span class="token punctuation">,</span> <span class="token string">'67px'</span><span class="token punctuation">,</span> <span class="token string">'3px'</span><span class="token punctuation">,</span> <span class="token string">'543px'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
aNum<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="数组转换"><a href="#数组转换" class="headerlink" title="数组转换"></a>数组转换</h3><h4 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString()"></a>toLocaleString()</h4><p>将数组转换为本地字符串，作用和toString差不多，但此方法是使用地区特定的分隔符来将生成的字符串连接起来</p>
<h4 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h4><p>数组中可以返回Array对象的原始值，通常都是在后台隐式的调用该方法，一般不显示的出现在代码中</p>
<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>将数组的所有元素都按指定的分隔符分隔，转换成字符串</p>
<h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>将字符串按片段分隔创建数组，和join()的功能相反,可以传符号、正则等</p>
<h3 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h3><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>用于搜索整个数组中具有给定值的元素，并且返回找到的第一个元素的索引值，如果没有找到则返回-1。<br>参数说明：<br>第一个参数是必须的，传入需要搜索的目标值<br>第二个参数可选，即指定开始搜索的位置，如果不传的话默认从头开始搜索，如果是负值，则从arr.lenth-n处开始搜索</p>
<h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h4><p>基本同上，不过是从后往前搜索</p>
<p>字符串中也有这两个方法，是兼容的</p>
<h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>模拟forEach()方法的实现原理</p>
<pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myForEach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">var</span> context <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token string">'请输入正确函数'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        callback<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">543</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">myForEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// array 即输入的原数组的值</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><p>这个方法对数组中的每一项都运行给定的函数直接量，如果该函数对每一项都返回true，则该方法返回true，注意是每一项都满足条件该方法才会返回true</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>

<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>该方法对数组中的每一项都运行给定函数，返回该函数返回true的项组成的数组，从单词字面意思理解，该方法是对数据执行一个过滤的作用，满足条件的返回，不满足条件的丢弃</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [6, 7]</span>
</code></pre>
<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>对数组每一项运行给定函数，需要注意的是，这个方法没有返回值。在编码过程中使用这个方法会带来很多便利，因为该方法就有一个遍历数组元素的作用，不用每次的写一个for循环来获取数组的每一项进行操作了</p>
<h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>对数组每一项运行给定函数，返回每次函数调用的结果组成的数组，注意：这里返回的数组，和some()等方法返回布尔值不一样，使用过程中需要区别。<br>原数组：不改变</p>
<h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>对数组每一项运行给定函数，如果该函数对任一项都返回true,则该方法返回true</p>
<h3 id="缩小方法"><a href="#缩小方法" class="headerlink" title="缩小方法"></a>缩小方法</h3><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>该方法从数组的第一项开始逐个遍历至尾，使用指定的函数来将数组的元素进行整合，只生成单个的值。<br>reduce()需要两个参数。第一个参数是执行化简操作的函数，这个参数必须；第二个参数是一个传递个函数的初始值。<br>注意：所谓初始值就传给个第一个函数参数执行操作的第一个值，在接下来的操作中，这个值就是上一次函数的返回值了，而当第二个传参不使用时，化简函数就使用数组的第一个元素和第二个元素作为其第一个和第二个参数进行计算。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组元素求和</span>
<span class="token keyword">var</span> multi <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组各元素的积</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 求数组中最大值</span>
<span class="token keyword">var</span> min <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 求数组中最小值</span>
</code></pre>
<h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h4><p>该方法的使用和reduce()是一样的，这里可以联想到 indexOf()方法和 lastindexOf()方法的关系，即reduceRight()方法是按照数组索引从高到低的处理数组</p>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[递归应用]]></title>
      <url>http://yoursite.com/2015/05/29/base/digui/</url>
      <content type="html"><![CDATA[<p>快速排序就是递归思想实现的。</p>
<h3 id="1到n之间不能被2整除的数的积"><a href="#1到n之间不能被2整除的数的积" class="headerlink" title="1到n之间不能被2整除的数的积"></a>1到n之间不能被2整除的数的积</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">caculate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">caculate</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">caculate</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token function">caculate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre>
<h3 id="1-100-之间不能被3整除的数之和"><a href="#1-100-之间不能被3整除的数之和" class="headerlink" title="1 - 100 之间不能被3整除的数之和"></a>1 - 100 之间不能被3整除的数之和</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">excute</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">excute</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">excute</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token function">excute</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre>
<h3 id="通过setTimeout实现setInterval功能"><a href="#通过setTimeout实现setInterval功能" class="headerlink" title="通过setTimeout实现setInterval功能"></a>通过setTimeout实现setInterval功能</h3><p>利用递归调用自身，比setInterval更易控制</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">events</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清除上一次定时器</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 控制递归结束</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Date时间类型]]></title>
      <url>http://yoursite.com/2015/05/27/base/date/</url>
      <content type="html"><![CDATA[<p>Date：是时间对象，它也是对象数据类型的一个细分<br>获取的是当前自己电脑的时间（获取客户端的时间）<br>var nowTime = new Date();<br>GMT：格林尼治时间（经纬度都是0）<br>中国是 GMT+0800 东八区<br>美国是 UTC-0500 西五区<br>var year=nowTime.getFullYear();<br>var month=nowTime.getMonth()+1；0—11<br>var day=nowTime.getDate();日<br>var week=nowTime.getDay();0-6 周日到周六<br>var hour=nowTime.getHours();小时<br>var minute=nowTime.getMinutes();分钟<br>var second=nowTime.getSecond();秒<br>var msSecond=nowTime.getMillisecond();微秒<br>getTime：获取当前操作时间距离1970-01-01 00:00:00 之间的毫秒差</p>
<p>格式化时间：（现在一般用Moment.js）</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 年</span>
    <span class="token keyword">var</span> months <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+1=2  月 0 - 11</span>
    <span class="token keyword">var</span> date <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 16 日</span>
    <span class="token keyword">var</span> day <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 星期4  0 - 6 星期日-星期六</span>
    <span class="token keyword">var</span> weeks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'星期日'</span><span class="token punctuation">,</span> <span class="token string">'星期一'</span><span class="token punctuation">,</span> <span class="token string">'星期二'</span><span class="token punctuation">,</span> <span class="token string">'星期三'</span><span class="token punctuation">,</span> <span class="token string">'星期四'</span><span class="token punctuation">,</span> <span class="token string">'星期五'</span><span class="token punctuation">,</span> <span class="token string">'星期六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> hours <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 小时 10</span>
    <span class="token keyword">var</span> minutes <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分钟 10</span>
    <span class="token keyword">var</span> seconds <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 秒</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 毫秒</span>
    str <span class="token operator">+</span><span class="token operator">=</span> year <span class="token operator">+</span> <span class="token string">'年'</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>months <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'月'</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'日'</span> 
    <span class="token operator">+</span> weeks<span class="token punctuation">[</span>day<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token function">addZ</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">addZ</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>倒计时：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//      时间格式字符串  通常用"/"  考虑兼容性</span>
<span class="token keyword">var</span> tarStr <span class="token operator">=</span> <span class="token string">'2017/2/18 12:00:00'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">timeouts</span><span class="token punctuation">(</span>tarStr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> tarTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>tarStr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 转化成标准时间格式</span>
    <span class="token keyword">var</span> curTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//     求总秒差</span>
    <span class="token keyword">var</span> deffTime <span class="token operator">=</span> <span class="token punctuation">(</span>tarTime <span class="token operator">-</span> curTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>deffTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'不好意思！抢购活动已经结束'</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//        console.log(deffTime);</span>
    <span class="token keyword">var</span> cDay <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 换算天</span>
    <span class="token keyword">var</span> cHour <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 换算小时</span>
    <span class="token keyword">var</span> days <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>deffTime <span class="token operator">/</span> cDay<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2天</span>
<span class="token comment" spellcheck="true">//    算出需要转化为小时的秒差</span>
    deffTime <span class="token operator">%</span><span class="token operator">=</span> cDay<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// deffTime = deffTime%cDay;</span>
<span class="token comment" spellcheck="true">//       算出小时</span>
    <span class="token keyword">var</span> hours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>deffTime <span class="token operator">/</span> cHour<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        算数转为分钟的秒数</span>
    deffTime <span class="token operator">%</span><span class="token operator">=</span> cHour<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// deffTime = deffTime % cHour;</span>
<span class="token comment" spellcheck="true">//      转化为分钟</span>
    <span class="token keyword">var</span> minutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>deffTime <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//      需要转化为秒的秒差</span>
    deffTime <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// deffTime = deffTime % 60;</span>
    <span class="token keyword">var</span> seconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>deffTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'距离抢购还有：'</span> <span class="token operator">+</span> <span class="token function">addO</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'天'</span> <span class="token operator">+</span> <span class="token function">addO</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'时'</span> <span class="token operator">+</span> <span class="token function">addO</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'分'</span> <span class="token operator">+</span> <span class="token function">addO</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span>
    oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 每隔一秒计算一次时间</span>
<span class="token keyword">var</span> timer <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">timeouts</span><span class="token punctuation">(</span>tarStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">timeouts</span><span class="token punctuation">(</span>tarStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 补零</span>
<span class="token keyword">function</span> <span class="token function">addO</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Date </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据类型比较的例子]]></title>
      <url>http://yoursite.com/2015/05/27/base/typeCompare/</url>
      <content type="html"><![CDATA[<p>两个等号进行比较时的规律<br> 1、对象==对象  返回值永远是false<br> 对象包含 数组类 [] 对象类 {}<br> {}=={}<br> []==[]<br> {}==[]<br> 两个等号左右的值，只有是不同数据类型的时候，才需要进行转化，如果是相同数据类型，就不需要转化</p>
<p>2、对象==字符串<br> 等号两侧数据类型不同，需要转为相同数据类型<br> 将对象转为字符串，调用.toString()方法<br> {}.toString()–&gt;”[object Object]”<br> [].toString()–&gt;””<br> {}==””   “[object Object]”==””  –&gt;false<br> []==””   “”==””  –&gt;true</p>
<p> 3、对象==数字<br> 第一步将对象转为字符串<br> 第二步将字符串转为数字<br> 第三步数字和数字进行比较<br> []==0 –》[].toString()==0 –&gt;””==0 –&gt;Number(“”)==0–&gt;0==0  true<br> {}==0 –&gt;{}.toString()==0–&gt;”[object Object]”==0 –&gt;Number(“[object Object]”)==0–&gt;NaN==0  false</p>
<p> 4、对象==布尔  最终都转为数字进行比较<br> 第一步将对象转为字符串<br> 第二步将字符串转为数字<br> 第三步将布尔转为数字<br> 第四步数字和数字进行比较<br> []==true<br> 第一步：[].toString()==Number(true) –》””==1<br> 第二步：Number(“”)==1 –&gt; 0==1<br> 返回值：false<br> {}==false<br> 第一步：{}.toString()==Number(false)–&gt;”[object Object]”==0<br> 第二步：Number(“[object Object]”)==0–&gt;NaN==0<br> 返回值：false</p>
<p>5、字符串==数字<br> 将字符串转为数字<br> “123”==1   – &gt;Number(“123”)==1  –&gt;  123==1 false</p>
<p> 6、字符串==布尔<br> 字符串转为数字  布尔转为数字<br> “1”==true   Number(“1”)==Number(true) –&gt;  1==1  true<br> “1”==!””    Number(“1”)==!Boolean(“”) –&gt; 1==!false –&gt; 1==true–&gt;1==Number(true) –&gt;1==1  true</p>
<p> 7、数字==布尔<br> 布尔转为数字<br> true  – 》1<br> false –》0</p>
<p> 8、null==undefined   true<br> null===undefined   false</p>
<p> 9、null==其他数据类型  永远是false<br> undefined == 其他数据类型 永远是false</p>
<p> 10、NaN==NaN  永远是false</p>
<p>在运算之前，分清楚等号两侧的数据类型<br>（1+1）==（1+2）<br> 2==3<br>等号两侧如果有运算，先进行运算，等号两侧是进行最终值的比较</p>
<p>[]==![]<br>对象==布尔<br>[].toString() –&gt; “” –&gt; Number(“”) –&gt; 0<br>![]–!Boolean([])–&gt;!true–&gt;false–Number(false)–&gt; 0<br>0==0   true</p>
<p>parseFloat(“3.4b”)==Number(“3.4”)<br>数字==数字<br>3.4=3.4  true</p>
<p>!{}==false<br>布尔==布尔<br>!{} – &gt; !Boolean({})–&gt;!true–&gt;false<br>false<br>false==false  true</p>
<p>![]==0<br>布尔==数字<br>![]–!Boolean([])–&gt;!true–&gt;false–Number(false)–&gt; 0<br>0<br>0==0  true</p>
<p>!([]=={})<br>!(这个结果取反)   !（对象==对象）！（false） –》true</p>
<p>[]==[].toString()<br>对象==字符串<br>[]–&gt;[].toString()–&gt;””<br>[].toString()–&gt;””<br>“”==””  true</p>
<p>{name:123}==!false<br>对象==布尔<br>{name:123}–》{name:123}.toString()–&gt;”[object Object]”–&gt;Number(“[object Object]”)–&gt;NaN<br>!false–&gt;true–&gt;Number(true)–&gt;1<br>NaN==1   false</p>
<p>1=={}<br>数字==对象<br>1<br>{}–》{}.toString()–&gt;”[object Object]”–&gt;Number(“[object Object]”)–&gt;NaN<br>1==NaN  false</p>
<p>“1”==[1]<br>字符串==对象<br>“1”<br>[1]–&gt;[1].toString()–&gt;”1”<br>“1”==”1” true</p>
<p>1===parseInt(“1.2nxskdjsk”)<br>数字===数字<br>1===1  true</p>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中的数据类型]]></title>
      <url>http://yoursite.com/2015/05/27/base/jsDataType/</url>
      <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>js中的数据类型分为基本数据类型和引用数据类型</p>
<p>基本数据类型：number string boolean null undefined<br>引用数据类型：<br>对象object：Array Object RegExp Math Date String Number<br>函数Function</p>
<h3 id="number数据类型"><a href="#number数据类型" class="headerlink" title="number数据类型"></a>number数据类型</h3><p>包含整数和浮点数。</p>
<p>将其他数据类型转为数字数据类型的方法？<br>Number()：<br>强制将其他数据类型转为数字类型，当转化值中有一个不是数字的时候，就返回NaN，如果是数字的时候直接返回数字，Number()这个方法的返回值只有数字或NaN。<br>NaN：not a number 非有效数字</p>
<ul>
<li>Number({})<br>对象数据类型转化为数字的时候，首先会转化为字符串，然后再转化为数字。<br>第一步 先将括号中的{}转为字符串，调用.toString()方法<br>第二步 {}.toString() 转为字符串 最终值为”[object Object]”<br>Number(“[object Object]”) 最终值是NaN</li>
<li>Number([])<br>第一步 [].toString() 转为字符串最终值为 “” （空字符串）<br>第二步 Number(“”)  最终值是0</li>
<li>Number(null) 最终值是0</li>
<li>Number(undefined) 最终值是NaN</li>
<li>Number(true) 最终值是1</li>
<li>Number(false) 最终值是0<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"1+1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>
<span class="token comment" spellcheck="true">//console.log(Number([1,2]));</span>
<span class="token comment" spellcheck="true">//[1,2].toString() -- > "1,2"</span>
<span class="token comment" spellcheck="true">//Number("1,2") -- >NaN</span>
</code></pre>
Number()中的值如果是</li>
</ul>
<ol>
<li>字符串的时候，只要字符中有一个值不是数字返回NaN</li>
<li>对象的时候，先将对象转为字符串（调用.toString()方法），然后将字符串转为数字</li>
<li>布尔的时候，true为1，false 0</li>
<li>null的时候，为0</li>
<li>undefined的时候，为NaN</li>
</ol>
<p>isNaN()<br>检测一个值不是一个数字，返回值是布尔类型的值，要么是true要么是false，isNaN在验证之前，会先调用Number()方法，然后再去检查Number()方法的返回值。</p>
<p>parseFloat()<br>将字符串中的值从左向右查找，遇到非数字停止查找，将查找到的结果作为返回值，可以识别小数点</p>
<p>parseInt()<br>将字符串中的值从左向右查找，遇到非数字停止查找，将查找到的结果作为返回值，只能返回整数</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"123.45bc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123.45</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123.45bc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">".2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">".2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
</code></pre>
<h3 id="boolean数据类型"><a href="#boolean数据类型" class="headerlink" title="boolean数据类型"></a>boolean数据类型</h3><p>布尔是逻辑运算 只有两个值 true 和 false<br>如果判断一个值是真是假，遵循 0 “” NaN null undefined为假，其余都为真</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
</code></pre>
<h3 id="js中数据类型的比较"><a href="#js中数据类型的比较" class="headerlink" title="js中数据类型的比较"></a>js中数据类型的比较</h3><p>对象转为布尔值的时候，全部为true</p>
<p>‘==’ 两个值比较是否相等<br>‘===’ 绝对比较 只要两边数据类型不同 直接返回false</p>
<p>val1 == val2 如果两个值不是同一个数据类型 就会进行默认数据类型转换</p>
<p>对象 == 对象  永远不相等<br>对象 == 字符串 将对象通过toString 转化为字符串,再进行比较<br>对象 == 数字 将对象通过toString() 转化为字符串,然后在转化为数字<br>数字 == 字符串 字符串转化为数字 再进行比较<br>数字 == 布尔 将布尔转化为数字(true:1,  false:0) 在进行比较<br>字符串 == 布尔 都转化为数字在进行比较<br>null和undefind 跟任何其他数据类型都不等</p>
<h3 id="判断数据类型的方法"><a href="#判断数据类型的方法" class="headerlink" title="判断数据类型的方法"></a>判断数据类型的方法</h3><ol>
<li>typeof</li>
<li>instanceof </li>
<li>constructor</li>
<li>Object.prototype.toString.call()</li>
</ol>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随机数]]></title>
      <url>http://yoursite.com/2015/05/06/base/randomNum/</url>
      <content type="html"><![CDATA[<ol>
<li>Math.abs() 取绝对值</li>
<li>Math.ceil()向上取整 （出现小数点就向上＋1）</li>
<li>Math.floor()向下取整</li>
<li>Math.round()四舍五入</li>
<li>Math.max(val1,val2,val3…)取最大值</li>
<li>Math.min(val1,val2,val3…)取最小值</li>
<li>Math.random()获取[0-1)之间的随机小数（不包含1）</li>
<li>Math.round(Math.random()*(m-n)+n) 获取任意两个数之间的随机数</li>
</ol>
<h3 id="n-m-间的随机整数"><a href="#n-m-间的随机整数" class="headerlink" title="n - m 间的随机整数"></a>n - m 间的随机整数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> flag <span class="token operator">=</span> n<span class="token punctuation">;</span>
        n <span class="token operator">=</span> m<span class="token punctuation">;</span>
        m <span class="token operator">=</span> flag
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="取-0-100之间不重复的4个随机整数"><a href="#取-0-100之间不重复的4个随机整数" class="headerlink" title="取 0~100之间不重复的4个随机整数"></a>取 0~100之间不重复的4个随机整数</h3><p>for 循环</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">rdomOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            i<span class="token operator">--</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
</code></pre>
<p>while 循环</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">rdomWhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">rdomWhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="在指定字符串中取验证码"><a href="#在指定字符串中取验证码" class="headerlink" title="在指定字符串中取验证码"></a>在指定字符串中取验证码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">'abcdefgABCDEFG0123456789'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isNaN</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> temp<span class="token operator">=</span>n<span class="token punctuation">;</span>
        n<span class="token operator">=</span>m<span class="token punctuation">;</span>
        m<span class="token operator">=</span>temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//取随机数</span>
    <span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> val<span class="token operator">=</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> valStr<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>valStr<span class="token punctuation">)</span><span class="token operator">===</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            str2<span class="token operator">+</span><span class="token operator">=</span>valStr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数基础]]></title>
      <url>http://yoursite.com/2015/04/20/base/function/</url>
      <content type="html"><![CDATA[<ol>
<li>函数：是由事件驱动或者被调用时，可以重复使用的代码<br>事件驱动：点击事件  鼠标移入事件  鼠标移出事件<br>被调用：sum();–&gt;函数执行</li>
<li>函数的语法（基本语法）<br>定义：<br>关键字 函数名(){函数（函数体/函数代码）}<br>function fnName(){……}<br>执行：<br>函数名();<br>fnName();</li>
<li>函数的特点：<br>1) 函数定义独立存在时没有意义，只有被调用的时候，才会实现函数的功能<br>2) 定义一个函数，可以多次被调用执行，并且每次调用执行都是独立的<br>3) 函数内的变量，在函数外是获取不到的<br>函数是引用数据类型 函数名中存的值是一个地址</li>
<li>闭包：函数在执行的时候，形成私有作用域，里面的变量就成为私有变量，外界获取不到,函数的这种保护机制，叫做闭包</li>
<li>函数的参数：可以让函数内获取函数外的值<br>形参：用来接收外界传递给函数的值<br>形参在函数定义部分 函数名后面的括号内<br>实参：用来定义要传递的值<br>实参在函数执行是 函数名后面的括号内<br>基本语法：<br>function 函数名(形参1,形参2…){}<br>函数名(实参1,实参2…)<br>1) 函数可以不定义参数（形参和实参都不存在）<br>2) 函数如果定义形参而没有传递实参，那么形参获取到的是undefined<br>3) 函数如果只定义实参，而没有定义形参的时候，函数用arguments来接收实参</li>
<li>函数默认接收参数的对象–arguments<br>函数接收参数的方式有两种，第一种是人为定义形参，第二种是arguments<br>arguments（参数集合）是一个对象<br>获取到的值会以类数组的形式储存[1,2,3,4,5]<br>类数组和数组一样，都有索引和长度，类数组中的每一个都是类数组的属性值，类数组的属性名为索引</li>
<li>外界如何获取到函数的返回值（是一个值，而不是返回变量）<br>return 值;<br>1) return 后面可以有返回值，也可以没有返回值<br>2) 函数内出现return 函数内return后的代码就不会执行了</li>
</ol>
<p>返回值会出现undefined有两种情况？</p>
<ol>
<li>没有写return</li>
<li>写了return但没有赋值</li>
</ol>
<p>是否要返回值？<br>“获取”需要返回值，“设置”不需要返回值；</p>
<p>重点：<br>1) return 返回的是值，不是任何的变量<br>2) 函数名() 是函数的执行结果<br>3) 函数名相当于一个变量，是用来代表函数和储存函数的，函数名代表这个函数本身<br>4) return后不返回值的时候，函数执行结果接收到的是undefined</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  任意数求和</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> total<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> cur<span class="token operator">=</span><span class="token function">Number</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            total<span class="token operator">+</span><span class="token operator">=</span>cur<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> total<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"12bc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> js基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
